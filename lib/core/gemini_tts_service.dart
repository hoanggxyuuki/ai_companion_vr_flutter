import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/foundation.dart';

class GeminiTTSService {
  static const String _baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';
  
  static const String _apiKey = 'apikey';
  
  final AudioPlayer _audioPlayer = AudioPlayer();
  
  Future<bool> speak(String text, {
    String voiceName = 'Zephyr', 
    double temperature = 1.0,
  }) async {
    try {
      debugPrint('üîä Gemini TTS: Starting Vietnamese speech synthesis');
      debugPrint('üîë API Key configured');
        ``
      if (text.trim().isEmpty) {
        debugPrint('‚ùå Gemini TTS: Empty text provided');
        return false;
      }
      
      final vietnameseText = _optimizeVietnameseText(text);
      debugPrint('üéôÔ∏è Gemini TTS: Synthesizing Vietnamese text: "$vietnameseText"');
      
      final Map<String, dynamic> payload = {
        "contents": [
          {
            "role": "user",
            "parts": [
              {
                "text": "H√£y ƒë·ªçc ƒëo·∫°n vƒÉn sau b·∫±ng gi·ªçng n√≥i ti·∫øng Vi·ªát t·ª± nhi√™n, r√µ r√†ng v√† th√¢n thi·ªán: $vietnameseText"
              }
            ]
          }
        ],
        "generationConfig": {
          "temperature": temperature,
          "responseModalities": ["AUDIO"],
          "speechConfig": {
            "voiceConfig": {
              "prebuiltVoiceConfig": {
                "voiceName": voiceName
              }
            }
          }
        }
      };
      
      debugPrint('üöÄ Gemini TTS: Making HTTP request');
      
      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode(payload),
      );
      
      debugPrint('üìä Gemini TTS: Response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        if (responseData['candidates'] != null && 
            responseData['candidates'].isNotEmpty &&
            responseData['candidates'][0]['content'] != null &&
            responseData['candidates'][0]['content']['parts'] != null &&
            responseData['candidates'][0]['content']['parts'].isNotEmpty) {
          
          final part = responseData['candidates'][0]['content']['parts'][0];
          
          if (part['inlineData'] != null && part['inlineData']['data'] != null) {
            debugPrint('‚úÖ Gemini TTS: Received audio data');
            
            final base64AudioData = part['inlineData']['data'];
            final mimeType = part['inlineData']['mimeType'] ?? 'audio/wav';
            final audioBytes = base64Decode(base64AudioData);
            
            debugPrint('üéµ Audio data size: ${audioBytes.length} bytes');
            debugPrint('üéµ MIME type: $mimeType');
            
            final processedAudio = _ensureWavFormat(audioBytes, mimeType);
            
            final Directory tempDir = await getTemporaryDirectory();
            final String tempPath = '${tempDir.path}/gemini_tts_${DateTime.now().millisecondsSinceEpoch}.wav';
            final File tempFile = File(tempPath);
            await tempFile.writeAsBytes(processedAudio);
            
            debugPrint('üíæ Audio file saved to: $tempPath');
            
            debugPrint('üéµ Playing Vietnamese audio...');
            await _audioPlayer.play(DeviceFileSource(tempPath));
            
            Future.delayed(const Duration(seconds: 15), () {
              if (tempFile.existsSync()) {
                tempFile.delete();
                debugPrint('üîÑ Cleaned up temp file: $tempPath');
              }
            });
            
            debugPrint('‚úÖ Gemini TTS: Vietnamese audio played successfully');
            return true;
          }
        }
        
        debugPrint('‚ùå Gemini TTS: No audio data in response');
        debugPrint('Response: ${response.body}');
        return false;
        
      } else {
        debugPrint('‚ùå Gemini TTS: HTTP Error ${response.statusCode}: ${response.body}');
        return false;
      }
      
    } catch (e) {
      debugPrint('üö® Gemini TTS: Exception occurred: $e');
      debugPrint('üö® Stack trace: ${StackTrace.current}');
      return false;
    }
  }
  
  String _optimizeVietnameseText(String text) {
    String optimized = text;
    
    optimized = optimized.replaceAll('.', '. ');
    optimized = optimized.replaceAll(',', ', ');
    optimized = optimized.replaceAll('!', '! ');
    optimized = optimized.replaceAll('?', '? ');

    
    optimized = optimized.replaceAll(RegExp(r'\s+'), ' ');
    
    
    if (!optimized.endsWith('.') && !optimized.endsWith('!') && !optimized.endsWith('?')) {
      optimized += '.';
    }
    
    return optimized.trim();
  }
  
  Uint8List _ensureWavFormat(Uint8List audioData, String mimeType) {
    if (mimeType.contains('wav') || mimeType.contains('wave')) {
      return audioData;
    }
    

    return audioData;
  }
  
  Future<void> stop() async {
    try {
      await _audioPlayer.stop();
      debugPrint('Gemini TTS: Audio stopped');
    } catch (e) {
      debugPrint('Gemini TTS: Error stopping audio: $e');
    }
  }
  
  Future<bool> testTTS() async {
    debugPrint('üß™ üé§ Testing Gemini Vietnamese TTS...');
    final result = await speak(
      'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh s·ª≠ d·ª•ng c√¥ng ngh·ªá Gemini. '
      'T√¥i c√≥ th·ªÉ n√≥i ti·∫øng Vi·ªát r·∫•t t·ª± nhi√™n v√† r√µ r√†ng. '
      'H·ªá th·ªëng nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông ƒë·ªÉ h·ªó tr·ª£ b·∫°n.',
      voiceName: 'Zephyr'
    );
    debugPrint('üß™ Vietnamese TTS test result: $result');
    return result;
  }
  
  static const Map<String, String> vietnameseTranslations = {
    'person': 'ng∆∞·ªùi',
    'man': 'ƒë√†n √¥ng',
    'woman': 'ph·ª• n·ªØ',
    'child': 'tr·∫ª em',
    'boy': 'c·∫≠u b√©',
    'girl': 'c√¥ b√©',
    'baby': 'em b√©',
    'dog': 'con ch√≥',
    'cat': 'con m√®o',
    'bird': 'con chim',
    'fish': 'con c√°',
    'horse': 'con ng·ª±a',
    'cow': 'con b√≤',
    'sheep': 'con c·ª´u',
    
    'car': '√¥ t√¥',
    'truck': 'xe t·∫£i',
    'bus': 'xe bu√Ωt',
    'bicycle': 'xe ƒë·∫°p',
    'motorbike': 'xe m√°y',
    'motorcycle': 'xe m√°y',
    'train': 't√†u h·ªèa',
    'airplane': 'm√°y bay',
    'boat': 'thuy·ªÅn',
    'ship': 't√†u th·ªßy',
    
    'chair': 'c√°i gh·∫ø',
    'table': 'c√°i b√†n',
    'desk': 'b√†n l√†m vi·ªác',
    'bed': 'gi∆∞·ªùng ng·ªß',
    'sofa': 'gh·∫ø sofa',
    'couch': 'gh·∫ø sofa',
    'door': 'c·ª≠a',
    'window': 'c·ª≠a s·ªï',
    'lamp': 'ƒë√®n',
    'light': 'ƒë√®n',
    'mirror': 'g∆∞∆°ng soi',
    'picture': 'b·ª©c tranh',
    'clock': 'ƒë·ªìng h·ªì',
    
    'phone': 'ƒëi·ªán tho·∫°i',
    'cellphone': 'ƒëi·ªán tho·∫°i di ƒë·ªông',
    'smartphone': 'ƒëi·ªán tho·∫°i th√¥ng minh',
    'laptop': 'm√°y t√≠nh x√°ch tay',
    'computer': 'm√°y t√≠nh',
    'tablet': 'm√°y t√≠nh b·∫£ng',
    'television': 'ti vi',
    'tv': 'ti vi',
    'monitor': 'm√†n h√¨nh m√°y t√≠nh',
    'screen': 'm√†n h√¨nh',
    'keyboard': 'b√†n ph√≠m',
    'mouse': 'chu·ªôt m√°y t√≠nh',
    'camera': 'm√°y ·∫£nh',
    'remote': 'ƒëi·ªÅu khi·ªÉn t·ª´ xa',
    
    'apple': 'qu·∫£ t√°o',
    'banana': 'qu·∫£ chu·ªëi',
    'orange': 'qu·∫£ cam',
    'grape': 'nho',
    'strawberry': 'd√¢u t√¢y',
    'watermelon': 'd∆∞a h·∫•u',
    'rice': 'c∆°m',
    'bread': 'b√°nh m√¨',
    'cake': 'b√°nh ng·ªçt',
    'pizza': 'b√°nh pizza',
    'sandwich': 'b√°nh m√¨ k·∫πp',
    'water': 'n∆∞·ªõc u·ªëng',
    'coffee': 'c√† ph√™',
    'tea': 'n∆∞·ªõc tr√†',
    'milk': 's·ªØa',
    'juice': 'n∆∞·ªõc √©p tr√°i c√¢y',
    
    'book': 'quy·ªÉn s√°ch',
    'pen': 'c√¢y b√∫t',
    'pencil': 'b√∫t ch√¨',
    'eraser': 'c·ª•c t·∫©y',
    'ruler': 'th∆∞·ªõc k·∫ª',
    'paper': 'gi·∫•y',
    'notebook': 'v·ªü ghi ch√©p',
    'bag': 't√∫i x√°ch',
    'backpack': 'ba l√¥',
    'wallet': 'v√≠ ti·ªÅn',
    
    'shirt': '√°o s∆° mi',
    't-shirt': '√°o thun',
    'pants': 'qu·∫ßn d√†i',
    'jeans': 'qu·∫ßn jean',
    'dress': 'v√°y ƒë·∫ßm',
    'shoes': 'gi√†y',
    'sneakers': 'gi√†y th·ªÉ thao',
    'hat': 'm≈©',
    'cap': 'n√≥n',
    'glasses': 'k√≠nh m·∫Øt',
    'sunglasses': 'k√≠nh r√¢m',
    'watch': 'ƒë·ªìng h·ªì ƒëeo tay',
    
    'cup': 'c√°i c·ªëc',
    'mug': 'c·ªëc u·ªëng n∆∞·ªõc',
    'glass': 'ly th·ªßy tinh',
    'bottle': 'chai',
    'plate': 'ƒëƒ©a ƒÉn',
    'bowl': 'c√°i b√°t',
    'spoon': 'c√°i mu·ªóng',
    'fork': 'c√°i nƒ©a',
    'knife': 'con dao',
    'chopsticks': 'ƒë√¥i ƒë≈©a',
    
    'ball': 'qu·∫£ b√≥ng',
    'football': 'b√≥ng ƒë√°',
    'basketball': 'b√≥ng r·ªï',
    'toy': 'ƒë·ªì ch∆°i',
    'doll': 'b√∫p b√™',
    'game': 'tr√≤ ch∆°i',
    'puzzle': 'tr√≤ ch∆°i gh√©p h√¨nh',
  };
  
  static String translateToVietnamese(String englishName) {
    final translated = vietnameseTranslations[englishName.toLowerCase()];
    if (translated != null) {
      return translated;
    }
    
    return 'ƒë·ªì v·∫≠t';
  }
  
  Future<bool> announceDetectedObjects(List<String> objects) async {
    if (objects.isEmpty) {
      return await speak('T√¥i kh√¥ng th·∫•y v·∫≠t g√¨ trong khu v·ª±c n√†y c·∫£.');
    }
    
    if (objects.length == 1) {
      final vietnameseName = translateToVietnamese(objects.first);
      return await speak('T√¥i nh·∫≠n di·ªán ƒë∆∞·ª£c m·ªôt $vietnameseName.');
    }
    
    final vietnameseObjects = objects.map((obj) => translateToVietnamese(obj)).toList();
    
    if (objects.length == 2) {
      return await speak('T√¥i th·∫•y c√≥ ${vietnameseObjects[0]} v√† ${vietnameseObjects[1]}.');
    }
    
    final lastObject = vietnameseObjects.removeLast();
    final objectsList = vietnameseObjects.join(', ');
    return await speak('T√¥i nh·∫≠n di·ªán ƒë∆∞·ª£c $objectsList v√† $lastObject.');
  }
  
  Future<bool> greetUser() async {
    final greetings = [
      'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh c·ªßa b·∫°n.',
      'Ch√†o b·∫°n! T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n h√¥m nay.',
      'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
      'Ch√†o m·ª´ng b·∫°n! T√¥i l√† tr·ª£ l√Ω nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng.',
      'Xin ch√†o! H√¥m nay t√¥i s·∫Ω gi√∫p b·∫°n nh·∫≠n di·ªán c√°c v·∫≠t th·ªÉ xung quanh.',
    ];
    final greeting = greetings[DateTime.now().millisecond % greetings.length];
    return await speak(greeting, voiceName: 'Zephyr');
  }
  
  Future<bool> announceCameraStatus(bool isActive) async {
    if (isActive) {
      return await speak(
        'Camera ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng. T√¥i c√≥ th·ªÉ nh√¨n th·∫•y nh·ªØng g√¨ b·∫°n ƒëang quan s√°t.',
        voiceName: 'Sage'
      );
    } else {
      return await speak(
        'Camera ƒë√£ ƒë∆∞·ª£c t·∫Øt. T√¥i kh√¥ng th·ªÉ nh√¨n th·∫•y g√¨ trong l√∫c n√†y.',
        voiceName: 'Sage'
      );
    }
  }
  
  Future<bool> announceError(String error) async {
    return await speak(
      'Xin l·ªói, ƒë√£ x·∫£y ra m·ªôt l·ªói trong h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫ßn n·ªØa.',
      voiceName: 'Puck'
    );
  }
  
  Future<bool> announceNoObjectsDetected() async {
    final messages = [
      'T√¥i kh√¥ng th·∫•y v·∫≠t g√¨ ƒë·∫∑c bi·ªát trong khu v·ª±c n√†y.',
      'Kh√¥ng c√≥ ƒë·ªëi t∆∞·ª£ng n√†o ƒë∆∞·ª£c ph√°t hi·ªán.',
      'Khu v·ª±c n√†y tr√¥ng kh√° tr·ªëng tr·∫£i.',
      'T√¥i ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c v·∫≠t th·ªÉ n√†o.',
      'Hi·ªán t·∫°i kh√¥ng c√≥ g√¨ ƒë·ªÉ b√°o c√°o.',
    ];
    final message = messages[DateTime.now().millisecond % messages.length];
    return await speak(message, voiceName: 'Kore');
  }
  
  Future<bool> announceStartScanning() async {
    return await speak(
      'ƒêang b·∫Øt ƒë·∫ßu qu√©t v√† ph√¢n t√≠ch c√°c ƒë·ªëi t∆∞·ª£ng trong t·∫ßm nh√¨n.',
      voiceName: 'Zephyr'
    );
  }
  
  Future<bool> announceStopScanning() async {
    return await speak(
      'ƒê√£ d·ª´ng qu√° tr√¨nh qu√©t ƒë·ªëi t∆∞·ª£ng.',
      voiceName: 'Zephyr'
    );
  }
  
  Future<bool> announceInstructions() async {
    return await speak(
      'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng: Di chuy·ªÉn camera xung quanh ƒë·ªÉ t√¥i c√≥ th·ªÉ quan s√°t v√† nh·∫≠n di·ªán c√°c v·∫≠t th·ªÉ. '
      'T√¥i s·∫Ω m√¥ t·∫£ b·∫±ng ti·∫øng Vi·ªát nh·ªØng g√¨ t√¥i nh√¨n th·∫•y m·ªôt c√°ch chi ti·∫øt v√† r√µ r√†ng.',
      voiceName: 'Sage'
    );
  }
  
  Future<bool> announceDetectionDetails(String objectName, double confidence) async {
    final vietnameseName = translateToVietnamese(objectName);
    final confidencePercent = (confidence * 100).round();
    
    return await speak(
      'T√¥i nh·∫≠n di·ªán ƒë∆∞·ª£c $vietnameseName v·ªõi ƒë·ªô ch√≠nh x√°c $confidencePercent ph·∫ßn trƒÉm.',
      voiceName: 'Kore'
    );
  }
  
  void dispose() {
    _audioPlayer.dispose();
  }
}