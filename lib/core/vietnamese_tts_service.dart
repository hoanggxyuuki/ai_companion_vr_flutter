import 'package:flutter/foundation.dart';
import 'package:flutter_tts/flutter_tts.dart';

class VietnameseTTSService {
  late FlutterTts _flutterTts;
  bool _isInitialized = false;
  
  VietnameseTTSService() {
    _initTTS();
  }
  
  Future<void> _initTTS() async {
    try {
      _flutterTts = FlutterTts();
      
      await _flutterTts.setLanguage("vi-VN");
      
      await _flutterTts.setSpeechRate(0.5);
      
      await _flutterTts.setVolume(0.8);
      
      await _flutterTts.setPitch(1.0);
      
      final voices = await _flutterTts.getVoices;
      debugPrint('üé§ Available voices: $voices');
      
      final vietnameseVoices = voices.where((voice) => 
          voice['locale'].toString().contains('vi') || 
          voice['name'].toString().toLowerCase().contains('vietnam')).toList();
      
      if (vietnameseVoices.isNotEmpty) {
        final selectedVoice = vietnameseVoices.first;
        await _flutterTts.setVoice({
          "name": selectedVoice['name'], 
          "locale": selectedVoice['locale']
        });
        debugPrint('‚úÖ Selected Vietnamese voice: ${selectedVoice['name']}');
      }
      
      _isInitialized = true;
      debugPrint('‚úÖ Vietnamese TTS initialized successfully');
      
    } catch (e) {
      debugPrint('‚ùå Error initializing Vietnamese TTS: $e');
    }
  }
  
  Future<bool> speak(String text, {
    double? speechRate,
    double? volume,
    double? pitch,
  }) async {
    try {
      if (!_isInitialized) {
        await _initTTS();
      }
      
      if (text.trim().isEmpty) {
        debugPrint('‚ùå Vietnamese TTS: Empty text provided');
        return false;
      }
      
      debugPrint('üéôÔ∏è Vietnamese TTS: Speaking: "$text"');
      
      if (speechRate != null) {
        await _flutterTts.setSpeechRate(speechRate.clamp(0.0, 1.0));
      }
      if (volume != null) {
        await _flutterTts.setVolume(volume.clamp(0.0, 1.0));
      }
      if (pitch != null) {
        await _flutterTts.setPitch(pitch.clamp(0.5, 2.0));
      }
      
      final result = await _flutterTts.speak(text);
      
      if (result == 1) {
        debugPrint('‚úÖ Vietnamese TTS: Speech completed successfully');
        return true;
      } else {
        debugPrint('‚ùå Vietnamese TTS: Speech failed with result: $result');
        return false;
      }
      
    } catch (e) {
      debugPrint('üö® Vietnamese TTS: Exception occurred: $e');
      return false;
    }
  }
  
  Future<void> stop() async {
    try {
      await _flutterTts.stop();
      debugPrint('Vietnamese TTS: Stopped speaking');
    } catch (e) {
      debugPrint('Vietnamese TTS: Error stopping: $e');
    }
  }
  
  Future<void> pause() async {
    try {
      await _flutterTts.pause();
      debugPrint('Vietnamese TTS: Paused speaking');
    } catch (e) {
      debugPrint('Vietnamese TTS: Error pausing: $e');
    }
  }
  
  Future<bool> testTTS() async {
    debugPrint('üß™ Testing Vietnamese TTS...');
    final result = await speak(
      'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh c·ªßa b·∫°n. '
      'T√¥i ƒëang s·ª≠ d·ª•ng gi·ªçng n√≥i ti·∫øng Vi·ªát thu·∫ßn t√∫y ƒë·ªÉ giao ti·∫øp v·ªõi b·∫°n. '
      'H·ªá th·ªëng nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông.'
    );
    debugPrint('üß™ Vietnamese TTS test result: $result');
    return result;
  }
  
  static const Map<String, String> vietnameseTranslations = {
    'person': 'ng∆∞·ªùi',
    'man': 'ƒë√†n √¥ng',
    'woman': 'ph·ª• n·ªØ',
    'child': 'tr·∫ª em',
    'boy': 'c·∫≠u b√©',
    'girl': 'c√¥ b√©', 
    'baby': 'em b√©',
    'dog': 'con ch√≥',
    'cat': 'con m√®o',
    'bird': 'con chim',
    'fish': 'con c√°',
    'horse': 'con ng·ª±a',
    'cow': 'con b√≤',
    'sheep': 'con c·ª´u',
    
    'car': '√¥ t√¥',
    'truck': 'xe t·∫£i',
    'bus': 'xe bu√Ωt',
    'bicycle': 'xe ƒë·∫°p',
    'motorbike': 'xe m√°y',
    'motorcycle': 'xe m√°y',
    'train': 't√†u h·ªèa',
    'airplane': 'm√°y bay',
    'boat': 'thuy·ªÅn',
    'ship': 't√†u th·ªßy',
    
    'chair': 'c√°i gh·∫ø',
    'table': 'c√°i b√†n',
    'desk': 'b√†n l√†m vi·ªác',
    'bed': 'gi∆∞·ªùng ng·ªß',
    'sofa': 'gh·∫ø sofa',
    'door': 'c·ª≠a',
    'window': 'c·ª≠a s·ªï',
    'lamp': 'ƒë√®n',
    'light': 'ƒë√®n',
    'mirror': 'g∆∞∆°ng',
    'picture': 'tranh',
    'clock': 'ƒë·ªìng h·ªì',
    
    'phone': 'ƒëi·ªán tho·∫°i',
    'cellphone': 'ƒëi·ªán tho·∫°i di ƒë·ªông',
    'smartphone': 'ƒëi·ªán tho·∫°i th√¥ng minh',
    'laptop': 'm√°y t√≠nh x√°ch tay',
    'computer': 'm√°y t√≠nh',
    'tablet': 'm√°y t√≠nh b·∫£ng',
    'television': 'ti vi',
    'tv': 'ti vi',
    'monitor': 'm√†n h√¨nh',
    'screen': 'm√†n h√¨nh',
    'keyboard': 'b√†n ph√≠m',
    'mouse': 'chu·ªôt m√°y t√≠nh',
    'camera': 'm√°y ·∫£nh',
    'remote': 'ƒëi·ªÅu khi·ªÉn',
    
    'apple': 'qu·∫£ t√°o',
    'banana': 'qu·∫£ chu·ªëi',
    'orange': 'qu·∫£ cam',
    'grape': 'nho',
    'strawberry': 'd√¢u t√¢y',
    'watermelon': 'd∆∞a h·∫•u',
    'rice': 'c∆°m',
    'bread': 'b√°nh m√¨',
    'cake': 'b√°nh ng·ªçt',
    'pizza': 'pizza',
    'sandwich': 'b√°nh m√¨ sandwich',
    'water': 'n∆∞·ªõc',
    'coffee': 'c√† ph√™',
    'tea': 'tr√†',
    'milk': 's·ªØa',
    'juice': 'n∆∞·ªõc √©p',
    
    'book': 'quy·ªÉn s√°ch',
    'pen': 'b√∫t',
    'pencil': 'b√∫t ch√¨',
    'eraser': 't·∫©y',
    'ruler': 'th∆∞·ªõc k·∫ª',
    'paper': 'gi·∫•y',
    'notebook': 'v·ªü',
    'bag': 't√∫i x√°ch',
    'backpack': 'ba l√¥',
    'wallet': 'v√≠ ti·ªÅn',
    
    'shirt': '√°o s∆° mi',
    'pants': 'qu·∫ßn d√†i',
    'dress': 'v√°y',
    'shoes': 'gi√†y',
    'hat': 'm≈©',
    'glasses': 'k√≠nh m·∫Øt',
    'watch': 'ƒë·ªìng h·ªì ƒëeo tay',
    'bag': 't√∫i x√°ch',
    
    'cup': 'c·ªëc',
    'glass': 'ly',
    'bottle': 'chai',
    'plate': 'ƒëƒ©a',
    'bowl': 'b√°t',
    'spoon': 'mu·ªóng',
    'fork': 'nƒ©a',
    'knife': 'dao',
    'chopsticks': 'ƒë√¥i ƒë≈©a',
    
    'ball': 'qu·∫£ b√≥ng',
    'toy': 'ƒë·ªì ch∆°i',
    'doll': 'b√∫p b√™',
    'game': 'tr√≤ ch∆°i',
  };
  
  static String translateToVietnamese(String englishName) {
    final translated = vietnameseTranslations[englishName.toLowerCase()];
    if (translated != null) {
      return translated;
    }
    
    return 'ƒë·ªì v·∫≠t';
  }
  
  Future<bool> announceDetectedObjects(List<String> objects) async {
    if (objects.isEmpty) {
      return await speak('T√¥i kh√¥ng th·∫•y v·∫≠t g√¨ c·∫£.');
    }
    
    if (objects.length == 1) {
      final vietnameseName = translateToVietnamese(objects.first);
      return await speak('T√¥i th·∫•y c√≥ m·ªôt $vietnameseName.');
    }
    
    final vietnameseObjects = objects.map((obj) => translateToVietnamese(obj)).toList();
    
    if (objects.length == 2) {
      return await speak('T√¥i th·∫•y c√≥ ${vietnameseObjects[0]} v√† ${vietnameseObjects[1]}.');
    }
    
    final lastObject = vietnameseObjects.removeLast();
    final objectsList = vietnameseObjects.join(', ');
    return await speak('T√¥i th·∫•y c√≥ $objectsList v√† $lastObject.');
  }
  
  Future<bool> greetUser() async {
    final greetings = [
      'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n.',
      'Ch√†o b·∫°n! T√¥i s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n.',
      'Xin ch√†o! H√¥m nay t√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n?',
      'Ch√†o m·ª´ng b·∫°n! T√¥i l√† tr·ª£ l√Ω th√¥ng minh c·ªßa b·∫°n.',
    ];
    final greeting = greetings[DateTime.now().millisecond % greetings.length];
    return await speak(greeting);
  }
  
  Future<bool> announceCameraStatus(bool isActive) async {
    if (isActive) {
      return await speak('Camera ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t. T√¥i c√≥ th·ªÉ nh√¨n th·∫•y nh·ªØng g√¨ b·∫°n ƒëang quan s√°t.');
    } else {
      return await speak('Camera ƒë√£ ƒë∆∞·ª£c t·∫Øt. T√¥i kh√¥ng th·ªÉ nh√¨n th·∫•y g√¨.');
    }
  }
  
  Future<bool> announceError(String error) async {
    return await speak('Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.');
  }
  
  Future<bool> announceNoObjectsDetected() async {
    final messages = [
      'T√¥i kh√¥ng th·∫•y v·∫≠t g√¨ ƒë·∫∑c bi·ªát.',
      'Kh√¥ng c√≥ g√¨ ƒë·ªÉ b√°o c√°o.',
      'Khu v·ª±c n√†y tr√¥ng tr·ªëng tr·∫£i.',
      'T√¥i kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c v·∫≠t th·ªÉ n√†o.',
    ];
    final message = messages[DateTime.now().millisecond % messages.length];
    return await speak(message);
  }
  
  Future<bool> announceStartScanning() async {
    return await speak('ƒêang b·∫Øt ƒë·∫ßu qu√©t v√† nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng.');
  }
  
  Future<bool> announceStopScanning() async {
    return await speak('ƒê√£ d·ª´ng qu√©t ƒë·ªëi t∆∞·ª£ng.');
  }
  
  Future<bool> announceInstructions() async {
    return await speak(
      'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng: Di chuy·ªÉn camera ƒë·ªÉ t√¥i c√≥ th·ªÉ nh√¨n th·∫•y c√°c v·∫≠t th·ªÉ xung quanh. '
      'T√¥i s·∫Ω m√¥ t·∫£ nh·ªØng g√¨ t√¥i nh·∫≠n di·ªán ƒë∆∞·ª£c b·∫±ng ti·∫øng Vi·ªát.'
    );
  }
  
  void dispose() {
  }
}